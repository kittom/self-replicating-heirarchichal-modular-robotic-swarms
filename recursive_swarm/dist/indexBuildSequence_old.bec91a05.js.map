{"mappings":"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","sources":["js/decision/decision_old.js"],"sourcesContent":["\n// Amira Abdel-Rahman\n// (c) Massachusetts Institute of Technology 2020\n\n\nvar buildList=[];\nvar voxelIndexList;\nvar scale,setup;\nsetup={};\nsetup.nodes=[];\nsetup.edges=[];\nsetup.viz={};\nsetup.viz.colorMaps=[YlGnBu,coolwarm, winter ,jet];\nvar colormap=YlGnBu;\nvar maxOrder;\n\nvar Graph,gData;\nvar Graph1;\n\nvar Robots;\nvar minCost=Infinity;\nvar maxCost=0;\nvar minNodePath= \"\" ;\n\nfunction decisionTree(){\n    Robots=[\n        null,\n        {\n            size:1,\n            maxNum:4,\n            num:0\n        },\n        {\n            size:2,\n            maxNum:2,\n            num:0\n        },\n        null,\n        {\n            size:4,\n            maxNum:1,\n            num:0\n        }\n    ];\n    scale=400;\n\n\n    Robots[1].num++;\n    setup.nodes.push({\n        path:\"\",\n        name:\"[\"+Robots[4].num +\",\"+ Robots[2].num+\",\"+ Robots[1].num+\"]\",\n        name:\"Decision Tree\\nR⁴:\"+Robots[4].num +\", R²:\"+ Robots[2].num+\", R:\"+ Robots[1].num+\"\",\n        size:scale,\n        min:false,\n        parent:\"top\",\n        c:color66,\n        shape:'dot',\n        cost:estimateCost(Robots,\"\")\n    });\n\n\n    // console.log(estimateCost(Robots,\"\"));\n\n    decision(setup,Robots,1,\"\");\n\n    console.log(\"Min Node:\"+minNodePath+\"!!!\");\n\n    var node=setup.nodes.filter(n => n.path==minNodePath)[0];\n    node.min=true;\n    while(node.parent != \"top\"){\n        var edge=setup.edges.filter(e => (e.source==node.parent) &&(e.target==node.path))[0];\n        edge.min=true;\n        node=setup.nodes.filter(n => n.path==node.parent)[0];\n    }\n\n    var nodes=setup.nodes;\n    var links=setup.edges;\n\n    Graph(document.getElementById('graph')).graphData({ nodes, links });\n\n\n}\n\nfunction decision(setup,robots,size,name){\n\n    var cc=estimateCost(robots,name+\"b\");\n    setup.nodes.push({\n        path:name+\"b\",\n        type:\"build\",\n        // name:\"expand:\"+0,\n        // name:\"[\"+robots[4].num +\",\"+ robots[2].num+\",\"+ robots[1].num+\"] build cost:\"+estimateCost(robots,name+\"b\"),\n        name:\"Build \\n Time: \"+cc,\n        size:scale,\n        parent:name,\n        min:false,\n        c:'#56ffcc',\n        shape:'square',\n        cost:cc\n    });\n\n    setup.edges.push({source: name, target: name+\"b\",min:false});\n    \n\n    if(robots[size].num<robots[size].maxNum){\n        var r=JSON.parse(JSON.stringify(robots));\n        r[size].num++;\n        setup.nodes.push({\n            path:name+\"r\",\n            type:\"reproduce\",\n            // name:\"reproduce: [\"+r[4].num +\",\"+ r[2].num+\",\"+ r[1].num+\"]\",\n            name:\"Reproduce\\nR⁴:\"+r[4].num +\", R²:\"+ r[2].num+\", R:\"+ r[1].num+\"\",\n            size:scale,\n            parent:name,\n            min:false,\n            c:color88,\n            shape:'star'\n\n        });\n        setup.edges.push({source: name, target: name+\"r\",min:false});\n\n        //for each robot here propagate decision\n        decision(setup,r,size,name+\"r\");\n\n    }\n\n    if(size<=2 && robots[size*2].num<robots[size*2].maxNum){\n        var r=JSON.parse(JSON.stringify(robots));\n        r[size*2].num++;\n        setup.nodes.push({\n            path:name+\"g\",\n            type:\"grow\",\n            // name:\"grow: [\"+r[4].num +\",\"+ r[2].num+\",\"+ r[1].num+\"]\",\n            name:\"Evolve\\nR⁴:\"+r[4].num +\", R²:\"+ r[2].num+\", R:\"+ r[1].num+\"\",\n            size:scale*0.9,\n            parent:name,\n            min:false,\n            c:color77,\n            shape:'diamond'\n\n        });\n        setup.edges.push({source: name, target: name+\"g\",min:false});;\n        decision(setup,r,size*2,name+\"g\")\n\n    }\n\n    \n}\n\nfunction estimateCost(robots,path){\n    var cost =0;\n    //fisrt add cost of building robots\n    cost+=recursionCost(robots);\n\n    var binZ=buildList.listZ[buildList.currentZIndex];\n    var binSize=binZ.listSize[binZ.currentSizeIndex];\n    var binSDF=binSize.listSDF[binSize.currentSDFIndex];\n    \n    var indexZ=buildList.currentZIndex;\n    var indexSize=binZ.currentSizeIndex;\n    var indexSDF=binSize.currentSDFIndex;\n\n    var maxIndexZ=buildList.maxZIndex;\n    var maxIndexSize=binZ.maxSizeIndex;\n    var maxIndexSDF=binSize.maxSDFIndex;\n\n    for(var i=0;i<buildList.listZ.length;i++){ //for each z layer bin\n        binZ=buildList.listZ[i];\n        indexZ=i;\n        maxIndexSize=binZ.maxSizeIndex;\n\n        for(var j=0;j<binZ.listSize.length;j++){ //for each size bin\n            binSize=binZ.listSize[j];\n            indexSize=j;\n            maxIndexSDF=binSize.maxSDFIndex;\n\n            for(var k=0;k<binSize.listSDF.length;k++){ //for each sdf bin (signed distance field)\n                binSDF=binSize.listSDF[k];\n                indexSDF=k;\n                var cubesToBuild=[];\n                var size=binSize.size;\n\n                if(robots[size].num>0){\n                    //there is robots same size\n                    cubesToBuild=binSDF.listCubes;\n                }else if(robots[binSize.size/2].num>0 &&binSize.size>=2 ){\n                    \n                    //there is no robots same size, divide stock by 2\n                    for(var l=0;l<binSDF.listCubes.length;l++){\n                        for(var ii=0;ii<voxelIndexList[2].list.length;ii++){\n                            var x1=binSDF.listCubes[l].position.x+voxelIndexList[2].list[ii].x;\n                            var y1=binSDF.listCubes[l].position.y+voxelIndexList[2].list[ii].y;\n                            var z1=binSDF.listCubes[l].position.z+voxelIndexList[2].list[ii].z;\n                            var stockBuilt=false;\n                            if(buildList.listZ[i].listSize[j].size==1){\n                                stockBuilt=true;\n                            }\n                            cubesToBuild.push({\n                                layerZ:buildList.listZ[i].layerZ,\n                                size:buildList.listZ[i].listSize[j].size,\n                                sdfRank:buildList.listZ[i].listSize[j].listSDF[k].sdfRank,\n                                done:false,\n                                stockBuilt:stockBuilt,\n                                stockAssigned:false,\n                                stockPickedUp:false,\n                                position:new THREE.Vector3(\n                                    x1,\n                                    y1,\n                                    z1)\n                            });\n                        }\n                    }\n                    size=binSize.size/2;\n\n                }else if(robots[binSize.size/4].num>0&&binSize.size>=4){\n                    //there is no robots same size, divide stock by 8\n                    for(var l=0;l<binSDF.listCubes.length;l++){\n                        for(var ii=0;ii<voxelIndexList[4].list.length;ii++){\n                            var x1=binSDF.listCubes[l].position.x+voxelIndexList[4].list[ii].x;\n                            var y1=binSDF.listCubes[l].position.y+voxelIndexList[4].list[ii].y;\n                            var z1=binSDF.listCubes[l].position.z+voxelIndexList[4].list[ii].z;\n                            var stockBuilt=false;\n                            if(buildList.listZ[i].listSize[j].size==1){\n                                stockBuilt=true;\n                            }\n                            cubesToBuild.push({\n                                layerZ:buildList.listZ[i].layerZ,\n                                size:buildList.listZ[i].listSize[j].size,\n                                sdfRank:buildList.listZ[i].listSize[j].listSDF[k].sdfRank,\n                                done:false,\n                                stockBuilt:stockBuilt,\n                                stockAssigned:false,\n                                stockPickedUp:false,\n                                position:new THREE.Vector3(\n                                    x1,\n                                    y1,\n                                    z1)\n                            });\n                        }\n                    }\n                    size=binSize.size/4;\n\n                }\n\n                //check how many in parallel\n\n                var numRobotParallel= Math.floor(cubesToBuild.length / robots[size].num);\n                if((cubesToBuild.length/robots[size].num - Math.floor(cubesToBuild.length/robots[size].num))>0){\n                    numRobotParallel++;\n                }\n\n                //get furthest robot\n                var furthestVoxel=new THREE.Vector3(0,0,0);\n\n                for(var l=0;l<cubesToBuild.length;l++){ //for each cube add location (todo check if int)\n                    if( (cubesToBuild[l].position.x+cubesToBuild[l].position.y+cubesToBuild[l].position.z)\n                        > (furthestVoxel.x+furthestVoxel.y+furthestVoxel.z)){\n                        furthestVoxel=cubesToBuild[l].position.clone();\n                    }\n                }\n                cost+=(numRobotParallel*2*((furthestVoxel.x+furthestVoxel.y+furthestVoxel.z)));\n\n            }\n        }\n    }\n\n    if(cost<minCost){\n        minCost=cost;\n        minNodePath=path;\n    }\n    if(cost>maxCost){\n        // if(cost!=12126){\n            maxCost=cost;\n        //     console.log(maxCost)\n\n        // }\n            \n    }\n\n\n    return cost;\n\n}\n\nfunction recursionCost(robots){\n    //todo fix to more accurate estimate\n    // return cubeCost(2,2,2)*robots[1].num+cubeCost(4,4,4)*robots[2].num+cubeCost(8,8,8)*robots[4].num;\n    return cubeCost(1,1,1)*robots[1].num+cubeCost(2,2,2)*robots[2].num+cubeCost(4,4,4)*robots[4].num;\n\n}\n\nfunction cubeCost(x,y,z){\n    return 2.0*(((x*x+x)/2)*y*z + ((y*y+y)/2)*x*z + ((z*z+z)/2)*y*x);\n}\n\n/////////////////////////////////////////////\n\n//the one for vis built sequence no decision tree\nfunction createBuildList(json, setup, scale){\n    var offset2=12;\n    var offset=offset2+8;\n    var buildSize=32;\n    var gridSize=buildSize+2*(offset);\n    var order=0;\n\n    var voxelIndexList=[\n        null,\n        {\n            size:1,\n            list:[\n                new THREE.Vector3(0,0,0),\n    \n            ]\n        },\n        {\n            size:2,\n            list:[\n                new THREE.Vector3(0,0,0),\n                new THREE.Vector3(0,1,0),\n                new THREE.Vector3(1,0,0),\n                new THREE.Vector3(1,1,0),\n                new THREE.Vector3(0,0,1),\n                new THREE.Vector3(0,1,1),\n                new THREE.Vector3(1,0,1),\n                new THREE.Vector3(1,1,1)\n            ]\n    \n        },\n        null,\n        {\n            size:4,\n            list:[\n                new THREE.Vector3(0,0,0),\n                new THREE.Vector3(0,1,0),\n                new THREE.Vector3(0,2,0),\n                new THREE.Vector3(0,3,0),\n    \n                new THREE.Vector3(1,0,0),\n                new THREE.Vector3(1,1,0),\n                new THREE.Vector3(1,2,0),\n                new THREE.Vector3(1,3,0),\n    \n                new THREE.Vector3(2,0,0),\n                new THREE.Vector3(2,1,0),\n                new THREE.Vector3(2,2,0),\n                new THREE.Vector3(2,3,0),\n    \n                new THREE.Vector3(3,0,0),\n                new THREE.Vector3(3,1,0),\n                new THREE.Vector3(3,2,0),\n                new THREE.Vector3(3,3,0),\n    \n    \n                new THREE.Vector3(0,0,1),\n                new THREE.Vector3(0,1,1),\n                new THREE.Vector3(0,2,1),\n                new THREE.Vector3(0,3,1),\n    \n                new THREE.Vector3(1,0,1),\n                // new THREE.Vector3(1,1,1),\n                // new THREE.Vector3(1,2,1),\n                new THREE.Vector3(1,3,1),\n    \n                new THREE.Vector3(2,0,1),\n                // new THREE.Vector3(2,1,1),\n                // new THREE.Vector3(2,2,1),\n                new THREE.Vector3(2,3,1),\n    \n                new THREE.Vector3(3,0,1),\n                new THREE.Vector3(3,1,1),\n                new THREE.Vector3(3,2,1),\n                new THREE.Vector3(3,3,1),\n    \n                new THREE.Vector3(0,0,2),\n                new THREE.Vector3(0,1,2),\n                new THREE.Vector3(0,2,2),\n                new THREE.Vector3(0,3,2),\n    \n                new THREE.Vector3(1,0,2),\n                // new THREE.Vector3(1,1,2),\n                // new THREE.Vector3(1,2,2),\n                new THREE.Vector3(1,3,2),\n    \n                new THREE.Vector3(2,0,2),\n                // new THREE.Vector3(2,1,2),\n                // new THREE.Vector3(2,2,2),\n                new THREE.Vector3(2,3,2),\n    \n                new THREE.Vector3(3,0,2),\n                new THREE.Vector3(3,1,2),\n                new THREE.Vector3(3,2,2),\n                new THREE.Vector3(3,3,2),\n    \n    \n                new THREE.Vector3(0,0,3),\n                new THREE.Vector3(0,1,3),\n                new THREE.Vector3(0,2,3),\n                new THREE.Vector3(0,3,3),\n    \n                new THREE.Vector3(1,0,3),\n                new THREE.Vector3(1,1,3),\n                new THREE.Vector3(1,2,3),\n                new THREE.Vector3(1,3,3),\n    \n                new THREE.Vector3(2,0,3),\n                new THREE.Vector3(2,1,3),\n                new THREE.Vector3(2,2,3),\n                new THREE.Vector3(2,3,3),\n    \n                new THREE.Vector3(3,0,3),\n                new THREE.Vector3(3,1,3),\n                new THREE.Vector3(3,2,3),\n                new THREE.Vector3(3,3,3),\n                \n            ]\n    \n        }\n    \n    ];\n\n    var shift=gridSize/2.0;\n\n    var buildList={\n        currentZIndex:0,\n        maxZIndex:json.length,\n        listZ:[],\n        done:false,\n        availablePickup:[],\n        listToBuild:[]\n\n    };\n    // todo multiply by 4 as smallest size in cubeCone is 0.25\n    // y is z and z is y\n    // shift z by 1 cause sacrificial layer is 0\n    // shift x and y to not have negative values\n\n    setup.nodes.push({\n        path:\"[]\",\n        size:100,\n        name:\"Build \\n Sequence\",\n        level:0,\n        order:order\n    });\n\n    for(var i=0;i<json.length;i++){ //for each z layer bin\n        buildList.listZ.push({\n                layerZ:json[i][0][0][0].origin[1]*scale+1,\n                done:false,\n                currentSizeIndex:0,\n                maxSizeIndex:json[i].length,\n                listSize:[]\n        });\n\n        setup.nodes.push({\n            path:\"[\"+i+\"]\",\n            size:100,\n            module:\"[\"+i+\"]\",\n            // name:\"layer:\"+i+\"\",\n            name:\"L:\"+i+\"\",\n            level:1,\n            order:order\n        });\n        setup.edges.push({source: \"[]\", target: \"[\"+i+\"]\"});\n\n        for(var j=0;j<json[i].length;j++){ //for each size bin\n            buildList.listZ[i].listSize.push({\n                size:json[i][j][0][0].widths[0]*scale,\n                layerZ:buildList.listZ[i].layerZ,\n                done:false,\n                currentSDFIndex:0,\n                maxSDFIndex:json[i][j].length,\n                listSDF:[]\n                \n            });\n\n            setup.nodes.push({\n                path:\"[\"+i+\",\"+j+\"]\",\n                size:100,\n                module:\"[\"+i+\"]\",\n                // name:\"layer:\"+i+\", size:\"+json[i][j][0][0].widths[0]*scale+\"\",\n                name:\"S:\"+(json[i][j][0][0].widths[0]*scale)+\"\",\n                level:2,\n                order:order\n            });\n            setup.edges.push({source: \"[\"+i+\"]\", target: \"[\"+i+\",\"+j+\"]\"});\n\n            for(var k=0;k<json[i][j].length;k++){ //for each sdf bin (signed distance field)\n                buildList.listZ[i].listSize[j].listSDF.push({\n                    sdfRank:k,\n                    layerZ:buildList.listZ[i].layerZ,\n                    size:buildList.listZ[i].listSize[j].size,\n                    done:false,\n                    currentCubeIndex:0,\n                    maxCubeIndex:json[i][j][k].length,\n                    listCubes:[]\n                    \n                    \n                });\n\n                setup.nodes.push({\n                    path:\"[\"+i+\",\"+j+\",\"+k+\"]\",\n                    size:100,\n                    module:\"[\"+i+\"]\",\n                    // name:\"layer:\"+i+\", size:\"+buildList.listZ[i].listSize[j].size+\", sdf:\"+k+\"\",\n                    name:\"SDF:\"+k+\"\",\n                    level:3,\n                    order:order\n                });\n                setup.edges.push({source: \"[\"+i+\",\"+j+\"]\", target: \"[\"+i+\",\"+j+\",\"+k+\"]\"});\n                \n\n                for(var l=0;l<json[i][j][k].length;l++){ //for each cube add location (todo check if int)\n                    var stockBuilt=false;\n                    if(buildList.listZ[i].listSize[j].size==1){\n                        stockBuilt=true;\n                    }\n                    buildList.listZ[i].listSize[j].listSDF[k].listCubes.push({\n                        layerZ:buildList.listZ[i].layerZ,\n                        size:buildList.listZ[i].listSize[j].size,\n                        sdfRank:buildList.listZ[i].listSize[j].listSDF[k].sdfRank,\n                        done:false,\n                        stockBuilt:stockBuilt,\n                        stockAssigned:false,\n                        stockPickedUp:false,\n                        position:new THREE.Vector3(\n                            json[i][j][k][l].origin[0]*scale+shift,\n                            json[i][j][k][l].origin[2]*scale+shift,\n                            json[i][j][k][l].origin[1]*scale+1)\n                    });\n\n                    setup.nodes.push({\n                        path:\"[\"+i+\",\"+j+\",\"+k+\",\"+l+\"]\",\n                        size:200*buildList.listZ[i].listSize[j].size,\n                        module:\"[\"+i+\"]\",\n                        // name:\"layer:\"+i+\", size:\"+buildList.listZ[i].listSize[j].size+\", sdf:\"+k+\", cube:\"+l+\"\",\n                        name:\"x:\"+json[i][j][k][l].origin[0]*scale+\", y:\"+json[i][j][k][l].origin[2]*scale+\", z:\"+(json[i][j][k][l].origin[1]*scale+1.0),\n                        level:4,\n                        order:order\n                    });\n                    setup.edges.push({source: \"[\"+i+\",\"+j+\",\"+k+\"]\", target: \"[\"+i+\",\"+j+\",\"+k+\",\"+l+\"]\"});\n\n                    \n\n\n                }\n                order++;\n            }\n        }\n    }\n\n    maxOrder=order;\n\n    return buildList;\n}\n\n// the one for the simulation\nfunction createBuildList1(json, setup, scale){\n    var offset2=12;\n    var offset=offset2+8;\n    var buildSize=32;\n    var gridSize=buildSize+2*(offset);\n    var opacity=0.9;\n    var order1=0;\n\n\n    var voxelIndexList=[\n        null,\n        {\n            size:1,\n            list:[\n                new THREE.Vector3(0,0,0),\n    \n            ]\n        },\n        {\n            size:2,\n            list:[\n                new THREE.Vector3(0,0,0),\n                new THREE.Vector3(0,1,0),\n                new THREE.Vector3(1,0,0),\n                new THREE.Vector3(1,1,0),\n                new THREE.Vector3(0,0,1),\n                new THREE.Vector3(0,1,1),\n                new THREE.Vector3(1,0,1),\n                new THREE.Vector3(1,1,1)\n            ]\n    \n        },\n        null,\n        {\n            size:4,\n            list:[\n                new THREE.Vector3(0,0,0),\n                new THREE.Vector3(0,1,0),\n                new THREE.Vector3(0,2,0),\n                new THREE.Vector3(0,3,0),\n    \n                new THREE.Vector3(1,0,0),\n                new THREE.Vector3(1,1,0),\n                new THREE.Vector3(1,2,0),\n                new THREE.Vector3(1,3,0),\n    \n                new THREE.Vector3(2,0,0),\n                new THREE.Vector3(2,1,0),\n                new THREE.Vector3(2,2,0),\n                new THREE.Vector3(2,3,0),\n    \n                new THREE.Vector3(3,0,0),\n                new THREE.Vector3(3,1,0),\n                new THREE.Vector3(3,2,0),\n                new THREE.Vector3(3,3,0),\n    \n    \n                new THREE.Vector3(0,0,1),\n                new THREE.Vector3(0,1,1),\n                new THREE.Vector3(0,2,1),\n                new THREE.Vector3(0,3,1),\n    \n                new THREE.Vector3(1,0,1),\n                // new THREE.Vector3(1,1,1),\n                // new THREE.Vector3(1,2,1),\n                new THREE.Vector3(1,3,1),\n    \n                new THREE.Vector3(2,0,1),\n                // new THREE.Vector3(2,1,1),\n                // new THREE.Vector3(2,2,1),\n                new THREE.Vector3(2,3,1),\n    \n                new THREE.Vector3(3,0,1),\n                new THREE.Vector3(3,1,1),\n                new THREE.Vector3(3,2,1),\n                new THREE.Vector3(3,3,1),\n    \n                new THREE.Vector3(0,0,2),\n                new THREE.Vector3(0,1,2),\n                new THREE.Vector3(0,2,2),\n                new THREE.Vector3(0,3,2),\n    \n                new THREE.Vector3(1,0,2),\n                // new THREE.Vector3(1,1,2),\n                // new THREE.Vector3(1,2,2),\n                new THREE.Vector3(1,3,2),\n    \n                new THREE.Vector3(2,0,2),\n                // new THREE.Vector3(2,1,2),\n                // new THREE.Vector3(2,2,2),\n                new THREE.Vector3(2,3,2),\n    \n                new THREE.Vector3(3,0,2),\n                new THREE.Vector3(3,1,2),\n                new THREE.Vector3(3,2,2),\n                new THREE.Vector3(3,3,2),\n    \n    \n                new THREE.Vector3(0,0,3),\n                new THREE.Vector3(0,1,3),\n                new THREE.Vector3(0,2,3),\n                new THREE.Vector3(0,3,3),\n    \n                new THREE.Vector3(1,0,3),\n                new THREE.Vector3(1,1,3),\n                new THREE.Vector3(1,2,3),\n                new THREE.Vector3(1,3,3),\n    \n                new THREE.Vector3(2,0,3),\n                new THREE.Vector3(2,1,3),\n                new THREE.Vector3(2,2,3),\n                new THREE.Vector3(2,3,3),\n    \n                new THREE.Vector3(3,0,3),\n                new THREE.Vector3(3,1,3),\n                new THREE.Vector3(3,2,3),\n                new THREE.Vector3(3,3,3),\n                \n            ]\n    \n        }\n    \n    ];\n\n    var totalNumber=0;\n\n\n    var shift=gridSize/2.0;\n\n    var buildList={\n        currentZIndex:0,\n        maxZIndex:json.length,\n        listZ:[],\n        done:false,\n        availablePickup:[],\n        listToBuild:[]\n\n    };\n    // todo multiply by 4 as smallest size in cubeCone is 0.25\n    // y is z and z is y\n    // shift z by 1 cause sacrificial layer is 0\n    // shift x and y to not have negative values\n\n    for(var i=0;i<json.length;i++){ //for each z layer bin\n        buildList.listZ.push({\n                layerZ:json[i][0][0][0].origin[1]*scale+1,\n                done:false,\n                currentSizeIndex:0,\n                maxSizeIndex:json[i].length,\n                listSize:[]\n            });\n        for(var j=0;j<json[i].length;j++){ //for each size bin\n            buildList.listZ[i].listSize.push({\n                size:json[i][j][0][0].widths[0]*scale,\n                layerZ:buildList.listZ[i].layerZ,\n                done:false,\n                currentSDFIndex:0,\n                maxSDFIndex:json[i][j].length,\n                listSDF:[]\n                \n            });\n            for(var k=0;k<json[i][j].length;k++){ //for each sdf bin (signed distance field)\n                buildList.listZ[i].listSize[j].listSDF.push({\n                    sdfRank:k,\n                    layerZ:buildList.listZ[i].layerZ,\n                    size:buildList.listZ[i].listSize[j].size,\n                    done:false,\n                    currentCubeIndex:0,\n                    maxCubeIndex:json[i][j][k].length,\n                    listCubes:[]\n                    \n                    \n                });\n                \n                for(var l=0;l<json[i][j][k].length;l++){ //for each cube add location (todo check if int)\n                    var stockBuilt=false;\n                    totalNumber+=(buildList.listZ[i].listSize[j].size*buildList.listZ[i].listSize[j].size*buildList.listZ[i].listSize[j].size)\n\n                    if(buildList.listZ[i].listSize[j].size==1){\n                        stockBuilt=true;\n                    }\n                    buildList.listZ[i].listSize[j].listSDF[k].listCubes.push({\n                        layerZ:buildList.listZ[i].layerZ,\n                        size:buildList.listZ[i].listSize[j].size,\n                        sdfRank:buildList.listZ[i].listSize[j].listSDF[k].sdfRank,\n                        done:false,\n                        stockBuilt:stockBuilt,\n                        stockAssigned:false,\n                        stockPickedUp:false,\n                        position:new THREE.Vector3(\n                            json[i][j][k][l].origin[0]*scale+shift,\n                            json[i][j][k][l].origin[2]*scale+shift,\n                            json[i][j][k][l].origin[1]*scale+1)\n                    });\n                    var nomSize=buildList.listZ[i].listSize[j].size;\n                    var x=json[i][j][k][l].origin[0]*scale;\n                    var y=json[i][j][k][l].origin[1]*scale;\n                    var z=json[i][j][k][l].origin[2]*scale;\n\n                    // if(true){\n                    // if(json[i][j][k][l].origin[2]*scale+nomSize/2.0<0){\n                    if(json[i][j][k][l].origin[2]*scale+nomSize/2.0<0 || json[i][j][k][l].origin[0]*scale+nomSize/2.0<0){\n                        setup.nodes.push({\n                            id:\"[\"+nomSize+\",\"+x+\",\"+y+\",\"+z+\"]\",\n                            position:{\n                                x:x+nomSize/2.0,\n                                y:y+nomSize/2.0,\n                                z:z+nomSize/2.0\n                            },\n                            displacement:{\n                                x:0,\n                                y:0,\n                                z:0\n                            },\n                            nomSize:nomSize,\n                            orgNomSize:nomSize,\n                            viz:opacity,\n                            order:order1\n                        });\n\n                        addEdge(setup,nomSize,nomSize,x,y,z,opacity);\n\n                        if(nomSize==2){\n                            for(var ii=0;ii<voxelIndexList[2].list.length;ii++){\n                                var nomSize1=1;\n                                var x1=x+voxelIndexList[2].list[ii].x;\n                                var y1=y+voxelIndexList[2].list[ii].y;\n                                var z1=z+voxelIndexList[2].list[ii].z;\n                    \n                                setup.nodes.push({\n                                    id:\"[\"+nomSize1+\",\"+x1+\",\"+y1+\",\"+z1+\"]\",\n                                    position:{\n                                        x:x1+nomSize1/2.0,\n                                        y:y1+nomSize1/2.0,\n                                        z:z1+nomSize1/2.0\n                                    },\n                                    displacement:{\n                                        x:0,\n                                        y:0,\n                                        z:0\n                                    },\n                                    nomSize:nomSize1,\n                                    orgNomSize:nomSize,\n                                    viz:0.0,\n                                    order:order1\n                                });\n\n                                addEdge(setup,nomSize1,nomSize,x1,y1,z1,0);\n\n                            }\n                        }\n\n                        \n                        if(nomSize==4){\n                            for(var ii=0;ii<voxelIndexList[4].list.length;ii++){\n                                var nomSize1=1;\n                                var x1=x+voxelIndexList[4].list[ii].x;\n                                var y1=y+voxelIndexList[4].list[ii].y;\n                                var z1=z+voxelIndexList[4].list[ii].z;\n                    \n                                setup.nodes.push({\n                                    id:\"[\"+nomSize1+\",\"+x1+\",\"+y1+\",\"+z1+\"]\",\n                                    position:{\n                                        x:x1+nomSize1/2.0,\n                                        y:y1+nomSize1/2.0,\n                                        z:z1+nomSize1/2.0\n                                    },\n                                    displacement:{\n                                        x:0,\n                                        y:0,\n                                        z:0\n                                    },\n                                    nomSize:nomSize1,\n                                    orgNomSize:nomSize,\n                                    viz:0.0,\n                                    order:order1\n                                });\n\n                                addEdge(setup,nomSize1,nomSize,x1,y1,z1,0);\n                            }\n\n                        }\n                    }\n                }\n                order1++;\n            }\n        }\n    }\n\n    console.log(\"total number of blocks=\"+totalNumber)\n\n\n    maxOrder=order1;\n    console.log(maxOrder)\n    return buildList;\n}\n\n//the original one\nfunction createBuildList2(json, setup, scale,buildSize){\n    var offset2=12;\n    var offset=offset2+8;\n    var gridSize=buildSize+2*(offset);\n\n\n    voxelIndexList=[\n        null,\n        {\n            size:1,\n            list:[\n                new THREE.Vector3(0,0,0),\n    \n            ]\n        },\n        {\n            size:2,\n            list:[\n                new THREE.Vector3(0,0,0),\n                new THREE.Vector3(0,1,0),\n                new THREE.Vector3(1,0,0),\n                new THREE.Vector3(1,1,0),\n                new THREE.Vector3(0,0,1),\n                new THREE.Vector3(0,1,1),\n                new THREE.Vector3(1,0,1),\n                new THREE.Vector3(1,1,1)\n            ]\n    \n        },\n        null,\n        {\n            size:4,\n            list:[\n                new THREE.Vector3(0,0,0),\n                new THREE.Vector3(0,1,0),\n                new THREE.Vector3(0,2,0),\n                new THREE.Vector3(0,3,0),\n    \n                new THREE.Vector3(1,0,0),\n                new THREE.Vector3(1,1,0),\n                new THREE.Vector3(1,2,0),\n                new THREE.Vector3(1,3,0),\n    \n                new THREE.Vector3(2,0,0),\n                new THREE.Vector3(2,1,0),\n                new THREE.Vector3(2,2,0),\n                new THREE.Vector3(2,3,0),\n    \n                new THREE.Vector3(3,0,0),\n                new THREE.Vector3(3,1,0),\n                new THREE.Vector3(3,2,0),\n                new THREE.Vector3(3,3,0),\n    \n    \n                new THREE.Vector3(0,0,1),\n                new THREE.Vector3(0,1,1),\n                new THREE.Vector3(0,2,1),\n                new THREE.Vector3(0,3,1),\n    \n                new THREE.Vector3(1,0,1),\n                // new THREE.Vector3(1,1,1),\n                // new THREE.Vector3(1,2,1),\n                new THREE.Vector3(1,3,1),\n    \n                new THREE.Vector3(2,0,1),\n                // new THREE.Vector3(2,1,1),\n                // new THREE.Vector3(2,2,1),\n                new THREE.Vector3(2,3,1),\n    \n                new THREE.Vector3(3,0,1),\n                new THREE.Vector3(3,1,1),\n                new THREE.Vector3(3,2,1),\n                new THREE.Vector3(3,3,1),\n    \n                new THREE.Vector3(0,0,2),\n                new THREE.Vector3(0,1,2),\n                new THREE.Vector3(0,2,2),\n                new THREE.Vector3(0,3,2),\n    \n                new THREE.Vector3(1,0,2),\n                // new THREE.Vector3(1,1,2),\n                // new THREE.Vector3(1,2,2),\n                new THREE.Vector3(1,3,2),\n    \n                new THREE.Vector3(2,0,2),\n                // new THREE.Vector3(2,1,2),\n                // new THREE.Vector3(2,2,2),\n                new THREE.Vector3(2,3,2),\n    \n                new THREE.Vector3(3,0,2),\n                new THREE.Vector3(3,1,2),\n                new THREE.Vector3(3,2,2),\n                new THREE.Vector3(3,3,2),\n    \n    \n                new THREE.Vector3(0,0,3),\n                new THREE.Vector3(0,1,3),\n                new THREE.Vector3(0,2,3),\n                new THREE.Vector3(0,3,3),\n    \n                new THREE.Vector3(1,0,3),\n                new THREE.Vector3(1,1,3),\n                new THREE.Vector3(1,2,3),\n                new THREE.Vector3(1,3,3),\n    \n                new THREE.Vector3(2,0,3),\n                new THREE.Vector3(2,1,3),\n                new THREE.Vector3(2,2,3),\n                new THREE.Vector3(2,3,3),\n    \n                new THREE.Vector3(3,0,3),\n                new THREE.Vector3(3,1,3),\n                new THREE.Vector3(3,2,3),\n                new THREE.Vector3(3,3,3),\n                \n            ]\n    \n        }\n    \n    ];\n\n    var shift=gridSize/2.0;\n\n    var buildList={\n        currentZIndex:0,\n        maxZIndex:json.length,\n        listZ:[],\n        done:false,\n        availablePickup:[],\n        listToBuild:[]\n\n    };\n    // todo multiply by 4 as smallest size in cubeCone is 0.25\n    // y is z and z is y\n    // shift z by 1 cause sacrificial layer is 0\n    // shift x and y to not have negative values\n    var totalNumber=0;\n    for(var i=0;i<json.length;i++){ //for each z layer bin\n        buildList.listZ.push({\n                layerZ:json[i][0][0][0].origin[1]*scale+1,\n                done:false,\n                currentSizeIndex:0,\n                maxSizeIndex:json[i].length,\n                listSize:[]\n            });\n        for(var j=0;j<json[i].length;j++){ //for each size bin\n            buildList.listZ[i].listSize.push({\n                size:json[i][j][0][0].widths[0]*scale,\n                layerZ:buildList.listZ[i].layerZ,\n                done:false,\n                currentSDFIndex:0,\n                maxSDFIndex:json[i][j].length,\n                listSDF:[]\n                \n            });\n            for(var k=0;k<json[i][j].length;k++){ //for each sdf bin (signed distance field)\n                buildList.listZ[i].listSize[j].listSDF.push({\n                    sdfRank:k,\n                    layerZ:buildList.listZ[i].layerZ,\n                    size:buildList.listZ[i].listSize[j].size,\n                    done:false,\n                    currentCubeIndex:0,\n                    maxCubeIndex:json[i][j][k].length,\n                    listCubes:[]\n                    \n                    \n                });\n                \n                for(var l=0;l<json[i][j][k].length;l++){ //for each cube add location (todo check if int)\n                    var stockBuilt=false;\n                    totalNumber+=(buildList.listZ[i].listSize[j].size*buildList.listZ[i].listSize[j].size*buildList.listZ[i].listSize[j].size)\n                    if(buildList.listZ[i].listSize[j].size==1){\n                        stockBuilt=true;\n                    }\n                    buildList.listZ[i].listSize[j].listSDF[k].listCubes.push({\n                        layerZ:buildList.listZ[i].layerZ,\n                        size:buildList.listZ[i].listSize[j].size,\n                        sdfRank:buildList.listZ[i].listSize[j].listSDF[k].sdfRank,\n                        done:false,\n                        stockBuilt:stockBuilt,\n                        stockAssigned:false,\n                        stockPickedUp:false,\n                        position:new THREE.Vector3(\n                            json[i][j][k][l].origin[0]*scale+shift,\n                            json[i][j][k][l].origin[2]*scale+shift,\n                            json[i][j][k][l].origin[1]*scale+1)\n                    });\n                    \n                }\n            }\n        }\n    }\n    console.log(\"total number of blocks=\"+totalNumber)\n\n    return buildList;\n}\n\n\n\n/////////////utils////////////////////\n\nfunction addEdge(setup,nomSize,orgNomSize,x,y,z,viz){\n\n    // var source=\"[\"+nomSize+\",\"+x+\",\"+y+\",\"+z+\"]\";\n\n    // for(var i=-1;i<2;i++){\n    //     for(var j=-1;j<2;j++){\n    //     for(var k=-1;k<2;k++){\n    //         if(((i==0&&j==0)||(i==0&&k==0)||(j==0&&k==0))){ //not same voxel and no diagonals\n    //         if(!(i==0&&j==0&&k==0)){\n    //             var x1=x+i*nomSize;\n    //             var y1=y+j*nomSize;\n    //             var z1=z+k*nomSize;\n    //             var target=\"[\"+nomSize+\",\"+x1+\",\"+y1+\",\"+z1+\"]\";\n    //             var node=setup.nodes.find(v => v.id === target);\n    //             if(node!==undefined){\n    //             if(!(viz==0&&node.viz==0)){\n    //                 setup.edges.push({ id: 'e'+setup.edges.length, source: source, target: target ,stress:0 });\n\n    //             }\n    //             if(orgNomSize!=node.orgNomSize){\n    //                 setup.edges.push({ id: 'e'+setup.edges.length, source: source, target: target ,stress:0 });\n    //             }\n    //             }\n    //         }\n    //         }\n    //     }\n    //     }\n    // }\n\n}\n\nfunction getColor(value,min, max,colormap){\n    var val=map(value,min,max,1.0,0.5);\n    color=interpolateLinearly(val, colormap);\n    // return new THREE.Color(color[0],color[1],color[2]);\n    return new THREE.Color(color[0],color[1],color[2]).getHex();\n\n}\n\nfunction getColor11(value,min, max,colormap){\n    var val=map(value,min,max,0.2,1.0);\n    color=interpolateLinearly(val, colormap);\n    c=new THREE.Color(color[0],color[1],color[2]);\n    // console.log(c.getHexString())\n\n    // return new THREE.Color(color[0],color[1],color[2]);\n    return new THREE.Color(color[0],color[1],color[2]).getHexString();\n\n}\n\nfunction interpolateLinearly(x, values) {\n\t// Split values into four lists\n\tvar x_values = [];\n\tvar r_values = [];\n\tvar g_values = [];\n\tvar b_values = [];\n\tfor (i in values) {\n\t\tx_values.push(values[i][0]);\n\t\tr_values.push(values[i][1][0]);\n\t\tg_values.push(values[i][1][1]);\n\t\tb_values.push(values[i][1][2]);\n\t}\n\tvar i = 1;\n\twhile (x_values[i] < x) {\n\t\ti = i+1;\n\t}\n\ti = i-1;\n\tvar width = Math.abs(x_values[i] - x_values[i+1]);\n\tvar scaling_factor = (x - x_values[i]) / width;\n\t// Get the new color values though interpolation\n\tvar r = r_values[i] + scaling_factor * (r_values[i+1] - r_values[i])\n\tvar g = g_values[i] + scaling_factor * (g_values[i+1] - g_values[i])\n\tvar b = b_values[i] + scaling_factor * (b_values[i+1] - b_values[i])\n\treturn [enforceBounds(r), enforceBounds(g), enforceBounds(b)];\n}\n\nfunction enforceBounds(x) {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x > 1){\n\t\treturn 1;\n\t} else {\n\t\treturn x;\n\t}\n}\n\nfunction map (value, x1, y1, x2, y2) {\n\treturn (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n}\n    \n    \n  \n  \n"],"names":[],"version":3,"file":"indexBuildSequence_old.bec91a05.js.map","sourceRoot":"/__parcel_source_root/"}